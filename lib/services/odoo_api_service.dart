import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

class OdooApiService {
  final String _odooUrl = 'https://hsevn.com.vn';
  final String _dbName = 'sgc_pro';

  // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ "gi·∫•y th√¥ng h√†nh" sau khi ƒëƒÉng nh·∫≠p
  String? _sessionId;

  Future<Map<String, dynamic>> login(String email, String password) async {
    final url = Uri.parse('$_odooUrl/web/session/authenticate');
    final payload = json.encode({
      'jsonrpc': '2.0',
      'params': {'db': _dbName, 'login': email, 'password': password},
    });

    try {
      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: payload,
      );

      final responseBody = json.decode(response.body);

      if (responseBody.containsKey('error')) {
        throw Exception(responseBody['error']['message']);
      }

      if (response.statusCode == 200 && responseBody.containsKey('result')) {
        // --- N√ÇNG C·∫§P: L·∫§Y V√Ä L∆ØU L·∫†I SESSION ID ---
        final String? rawCookie = response.headers['set-cookie'];
        if (rawCookie != null) {
          _sessionId =
              RegExp(r'session_id=([^;]+)').firstMatch(rawCookie)?.group(1);
          print('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Session ID ƒë√£ ƒë∆∞·ª£c l∆∞u.');
        }
        // -----------------------------------------
        return responseBody['result'];
      } else {
        throw Exception('L·ªói t·ª´ m√°y ch·ªß: ${response.statusCode}');
      }
    } on SocketException {
      throw Exception(
          'Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng.');
    } catch (e) {
      throw Exception('ƒê√£ x·∫£y ra l·ªói: ${e.toString()}');
    }
  }

  /// === H√ÄM M·ªöI: L·∫•y danh s√°ch c√¥ng vi·ªác ===
  ///
  /// S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c 'search_read' c·ªßa Odoo ƒë·ªÉ t√¨m v√† ƒë·ªçc c√°c c√¥ng vi·ªác.
  Future<List<dynamic>> getTasks() async {
    if (_sessionId == null) {
      throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c phi√™n ƒë√£ h·∫øt h·∫°n.');
    }

    final url = Uri.parse('$_odooUrl/web/dataset/search_read');
    final payload = json.encode({
      'jsonrpc': '2.0',
      'method': 'call',
      'params': {
        // Model trong Odoo ch·ª©a c√°c c√¥ng vi·ªác, th∆∞·ªùng l√† 'project.task'
        'model': 'project.task',
        // L·ªçc c√°c c√¥ng vi·ªác c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i (s·∫Ω ƒë∆∞·ª£c Odoo t·ª± ƒë·ªông x·ª≠ l√Ω qua session)
        'domain': [],
        // C√°c tr∆∞·ªùng th√¥ng tin mu·ªën l·∫•y v·ªÅ, b·∫°n c√≥ th·ªÉ t√πy ch·ªânh
        'fields': ['id', 'name', 'project_id', 'partner_id', 'date_deadline'],
        'limit': 80, // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng c√¥ng vi·ªác l·∫•y v·ªÅ
      }
    });

    print('üöÄ ƒêang l·∫•y danh s√°ch c√¥ng vi·ªác t·ª´ Odoo...');

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          // G·ª≠i k√®m "gi·∫•y th√¥ng h√†nh" ƒë·ªÉ Odoo bi·∫øt ch√∫ng ta l√† ai
          'Cookie': 'session_id=$_sessionId',
        },
        body: payload,
      );

      final responseBody = json.decode(response.body);

      if (responseBody.containsKey('error')) {
        throw Exception(responseBody['error']['data']['message']);
      }

      if (response.statusCode == 200 && responseBody.containsKey('result')) {
        final List<dynamic> records = responseBody['result']['records'];
        print('‚úÖ L·∫•y th√†nh c√¥ng ${records.length} c√¥ng vi·ªác.');
        return records;
      } else {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu c√¥ng vi·ªác.');
      }
    } on SocketException {
      throw Exception('L·ªói m·∫°ng khi l·∫•y d·ªØ li·ªáu c√¥ng vi·ªác.');
    } catch (e) {
      throw Exception('L·ªói kh√¥ng x√°c ƒë·ªãnh: ${e.toString()}');
    }
  }
}
